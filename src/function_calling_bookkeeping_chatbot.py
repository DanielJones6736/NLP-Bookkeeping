# -*- coding: utf-8 -*-
"""Function Calling Bookkeeping ChatBot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WcF2ohv7rT1ofLvO5Bb8BpidPQOqsVnS

# 1. Import Basic Requirements

> This was initially implemented via Google Colab, so ordering isn't the best. Also going to divide into multiple more specific files.
Basic traditional CRUD operations work, everything stored in working directory.
"""

# primarily use function calls
from openai import OpenAI
# handle NY Corporations DB
import csv
import os
from datetime import datetime
# setup DB for better Querying
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, Column, String, Integer, Text, DateTime
from sqlalchemy.ext.declarative import declarative_base

"""# 2. Setup Database and Add Metadata


"""

# Setup SQLite db (currently just created locally, will likely use PostgreSQL later)
engine = create_engine('sqlite:///corporations.db')
Base = declarative_base()
Session = sessionmaker(bind=engine)
session = Session()

# setup metadata for Corporation DB
class Corporation(Base):
    __tablename__ = 'corporations'

    dos_id = Column(String, primary_key=True)  # Unique ID
    # general company data
    current_entity_name = Column(Text)
    initial_dos_filing_date = Column(DateTime)
    county = Column(Text)
    jurisdiction = Column(Text)
    entity_type = Column(Text)
    # Department of Service data. Needed for internal references (not relevant to project).
    dos_process_name = Column(Text)
    dos_process_address_1 = Column(Text)
    dos_process_address_2 = Column(Text)
    dos_process_city = Column(Text)
    dos_process_state = Column(Text)
    dos_process_zip = Column(Text)
    # CEO info
    CEO_name = Column(Text)
    CEO_address_1 = Column(Text)
    CEO_address_2 = Column(Text)
    CEO_city = Column(Text)
    CEO_state = Column(Text)
    CEO_zip = Column(Text)
    # Every corp. needs a registered agent to contact.
    # more info here: https://www.newyorkregisteredagent.com/
    registered_agent_name = Column(Text)
    registered_agent_address_1 = Column(Text)
    registered_agent_address_2 = Column(Text)
    registered_agent_city = Column(Text)
    registered_agent_state = Column(Text)
    registered_agent_zip = Column(Text)
    # location info for the company.
    location_name = Column(Text)
    location_address_1 = Column(Text)
    location_address_2 = Column(Text)
    location_city = Column(Text)
    location_state = Column(Text)
    location_zip = Column(Text)

# Add metadata to the db.
Base.metadata.create_all(engine)

"""# 3. Simplistic CRUD Operations (Needs updating)"""

# CREATE. simple initial create function.
def create_corporation(data):
    # setup Corporation object
    corp = Corporation(**data)
    # add & commit to db
    session.add(corp)
    session.commit()
    print(f"Corporation {corp.dos_id} added.")

# READ. simple initial read function (need to add more types of queries).
def read_corporation(dos_id):
    # create query on specific id that filters for the id.
    corp = session.query(Corporation).filter_by(dos_id=dos_id).first()
    return corp

# UPDATE. update find corporation, change specified attributes. re-commit.
def update_corporation(dos_id, updates):
    # same filter as read for specific company.
    corp = session.query(Corporation).filter_by(dos_id=dos_id).first()
    if corp:
        # for every update we have to do, change their values.
        for key, value in updates.items():
            setattr(corp, key, value)
        session.commit()
        print(f"Corporation {dos_id} updated.")
    else:
        print("Corporation not found.")

# DELETE. Find company and delete.
def delete_corporation(dos_id):
    corp = session.query(Corporation).filter_by(dos_id=dos_id).first()
    if corp:
        session.delete(corp)
        session.commit()
        print(f"Corporation {dos_id} deleted.")
    else:
        print("Corporation not found.")

"""# 5. Read file and fill out db"""

def import_csv():
    # current csv stored locally.
    csv_path = 'Active_Corporations___Beginning_1800_20250403.csv'
    session = Session()

    with open(csv_path, newline='', encoding='utf-8') as f:
        # reader uses 1st line for feature names. provided below.
        reader = csv.DictReader(f)
        for row in reader:
            corp = Corporation(
                dos_id=row['DOS ID'],
                current_entity_name=row['Current Entity Name'],
                # parse date for better formatting.
                initial_dos_filing_date=parse_date(row['Initial DOS Filing Date']),
                county=row['County'],
                jurisdiction=row['Jurisdiction'],
                entity_type=row['Entity Type'],
                dos_process_name=row['DOS Process Name'],
                dos_process_address_1=row['DOS Process Address 1'],
                dos_process_address_2=row['DOS Process Address 2'],
                dos_process_city=row['DOS Process City'],
                dos_process_state=row['DOS Process State'],
                dos_process_zip=row['DOS Process Zip'],
                CEO_name=row['CEO Name'],
                CEO_address_1=row['CEO Address 1'],
                CEO_address_2=row['CEO Address 2'],
                CEO_city=row['CEO City'],
                CEO_state=row['CEO State'],
                CEO_zip=row['CEO Zip'],
                registered_agent_name=row['Registered Agent Name'],
                registered_agent_address_1=row['Registered Agent Address 1'],
                registered_agent_address_2=row['Registered Agent Address 2'],
                registered_agent_city=row['Registered Agent City'],
                registered_agent_state=row['Registered Agent State'],
                registered_agent_zip=row['Registered Agent Zip'],
                location_name=row['Location Name'],
                location_address_1=row['Location Address 1'],
                location_address_2=row['Location Address 2'],
                location_city=row['Location City'],
                location_state=row['Location State'],
                location_zip=row['Location Zip'],
            )
            session.merge(corp)  # avoid accidental duplicates
            print("Merged Corporation: "+row['DOS ID'])
        print("Starting Commit")
        session.commit()
        print("CSV import complete.")

def parse_date(date_str):
    try:
        # change format to traditional datetime format
        return datetime.strptime(date_str, '%m/%d/%Y').date()
    except:
        return None

if __name__ == '__main__':
    import_csv()